@use 'sass:math';

// Colors
$gray-900: var(--gray-900);
$gray-800: var(--gray-800);
$gray-700: var(--gray-700);
$gray-600: var(--gray-600);
$gray-500: var(--gray-500);
$gray-400: var(--gray-400);
$gray-300: var(--gray-300);
$gray-200: var(--gray-200);
$gray-100: var(--gray-100);
$gray-50: var(--gray-50);
$gray-00: var(--gray-00);
$primary-900: var(--primary-900);
$primary-800: var(--primary-800);
$primary-700: var(--primary-700);
$primary-600: var(--primary-600);
$primary-500: var(--primary-500);
$primary-400: var(--primary-400);
$primary-300: var(--primary-300);
$primary-200: var(--primary-200);
$primary-100: var(--primary-100);
$primary-50: var(--primary-50);
$secondary-900: var(--secondary-900);
$secondary-800: var(--secondary-800);
$secondary-700: var(--secondary-700);
$secondary-600: var(--secondary-600);
$secondary-500: var(--secondary-500);
$secondary-400: var(--secondary-400);
$secondary-300: var(--secondary-300);
$secondary-200: var(--secondary-200);
$secondary-100: var(--secondary-100);
$secondary-50: var(--secondary-50);
$success-900: var(--success-900);
$success-800: var(--success-800);
$success-700: var(--success-700);
$success-600: var(--success-600);
$success-500: var(--success-500);
$success-400: var(--success-400);
$success-300: var(--success-300);
$success-200: var(--success-200);
$success-100: var(--success-100);
$success-50: var(--success-50);
$warning-900: var(--warning-900);
$warning-800: var(--warning-800);
$warning-700: var(--warning-700);
$warning-600: var(--warning-600);
$warning-500: var(--warning-500);
$warning-400: var(--warning-400);
$warning-300: var(--warning-300);
$warning-200: var(--warning-200);
$warning-100: var(--warning-100);
$warning-50: var(--warning-50);
$danger-900: var(--danger-900);
$danger-800: var(--danger-800);
$danger-700: var(--danger-700);
$danger-600: var(--danger-600);
$danger-500: var(--danger-500);
$danger-400: var(--danger-400);
$danger-300: var(--danger-300);
$danger-200: var(--danger-200);
$danger-100: var(--danger-100);
$danger-50: var(--danger-50);

// Media
$screen-xxl: 1440px;
$screen-xl: 1200px;
$screen-lg: 991px;
$screen-md: 767px;
$screen-sm: 576px;

// Settings
$auth-btn-width: var(--auth-btn-width);
$container-max-width: var(--container-max-width); // 1320

// Functions
@function math-div($a, $b) {
    @return calc($a / $b);
}

@function percent($px, $from) {
    $result: math-div($px, $from) * 100%;

    @return $result;
}

@function rem($px) {
    $result: math-div($px, 16) + rem;

    @return $result;
}

@function em($px, $current: 16) {
    $result: math-div($px, $current) + em;

    @return $result;
}

// Container
@mixin container {
    width: min($container-max-width, 90%);
    margin: auto;
}

// Flex
@mixin flexHorizontalGap($count) {
    $gap: $count * 4;

    display: flex;
    flex-direction: row;
    column-gap: rem($gap);
}

@mixin flexVerticalGap($count) {
    $gap: $count * 4;

    display: flex;
    flex-direction: column;
    row-gap: rem($gap);
}

// Adaptive Value
@mixin fontSize($size, $md: $size, $sm: $size) {
    font-size: rem($size);

    @media all and (max-width: $screen-md) {
        font-size: rem($md);
    }

    @media all and (max-width: $screen-sm) {
        font-size: rem($sm);
    }
}

@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $maxWidthContainer, $widthTo: $minWidth, $keepSize: 0) {
    @if $startSize == 0 {
        $startSize: 0.000001;
    }

    @if $minSize == 0 {
        $minSize: 0.000001;
    }

    $addSize: math-div($startSize - $minSize, 16);

    @if $maxWidthContainer == 0 {
        $widthFrom: $maxWidth;
    }

    $widthFromMedia: em($widthFrom);
    $widthToMedia: em($widthTo);
    $slope: math-div(($startSize - $minSize), ($widthFrom - $widthTo));
    $yIntersection: -$widthTo * $slope + $minSize;

    @if $yIntersection == 0 {
        $yIntersection: 0.000001;
    }

    $flyValue: #{toRem($yIntersection)}' + ' #{$slope * 100}vw;
    $propertyValue: #{'clamp(' rem($minSize) ',' $flyValue ',' rem($startSize) ')'};

    @if $minSize > $startSize {
        $propertyValue: #{'clamp(' rem($startSize) ',' $flyValue ',' rem($minSize) ')'};
    }

    @supports (#{$property}: $propertyValue) {
        #{$property}: $propertyValue;
    }

    @supports not (#{$property}: $propertyValue) {
        #{$property}: calc(
            #{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math-div($widthFrom, 16) - math-div($widthTo, 16)}
        );
    }

    @if $widthFrom != $maxWidth and $keepSize != 1 and $keepSize != 2 {
        @media (min-width: $widthFromMedia) {
            #{$property}: inherit;
        }
    }

    @if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
        @media (max-width: $widthToMedia) {
            #{$property}: inherit;
        }
    }
}
